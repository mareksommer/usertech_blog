<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Post;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Post::class);
    }

    /**
     * @return Post[]
     */
    public function cursorPagination(?string $cursor, ?int $limit = 2): array
    {
        if (!$cursor) {
            $cursor = date('Y-m-d H:i:s');
        }

        return $queryBuilder = $this->createQueryBuilder('p')
            ->andWhere('p.date < :cursor')
            ->andWhere('p.isActive = true')
            ->setParameter(':cursor', $cursor)
            ->orderBy('p.date', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function getPostsLeftByDate(\DateTime $date): string
    {
        return $queryBuilder = $this->createQueryBuilder('p')
            ->select('count(p.id)')
            ->andWhere('p.date < :date')
            ->andWhere('p.isActive = true')
            ->setParameter('date', $date)
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

    /**
     * @return Post[]
     */
    public function findExistingSlug(string $slug, string $id): array
    {
        return $queryBuilder = $this->createQueryBuilder('p')
            ->andWhere('p.slug = :slug')
            ->andWhere('p.id != :id')
            ->setParameter(':slug', $slug)
            ->setParameter(':id', $id)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Post[]
     */
    public function findAllforAPI(): array
    {
        return $queryBuilder = $this->createQueryBuilder('p')
            ->select('p.id, p.title, p.date, p.slug, p.viewsCount')
            ->andWhere('p.isActive = true')
            ->orderBy('p.date', 'DESC')
            ->getQuery()
            ->getResult()
        ;
    }
}
